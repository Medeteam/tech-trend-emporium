// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DBContextTechEmporiumTrend))]
    [Migration("20240930152731_catname2")]
    partial class catname2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Cart", b =>
                {
                    b.Property<Guid>("Cart_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Coupon_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Coupon_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created_at")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Shopping_status_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cart_id");

                    b.HasIndex("Coupon_id");

                    b.HasIndex("Shopping_status_id");

                    b.HasIndex("User_id")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category_description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Category_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("Created_at")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Job_status_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Category_id");

                    b.HasIndex("Job_status_id");

                    b.HasIndex("User_id");

                    b.ToTable("Categories");

                    b.HasAnnotation("Relational:JsonPropertyName", "categoryObject");
                });

            modelBuilder.Entity("Data.Entities.Coupon", b =>
                {
                    b.Property<Guid>("Coupon_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Coupon_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Coupon_status")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Created_at")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.HasKey("Coupon_id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Data.Entities.JobStatus", b =>
                {
                    b.Property<Guid>("Job_status_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Job_status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Job_status_id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("Cart_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created_at")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Shopping_status_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Total_price")
                        .HasColumnType("int");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Order_id");

                    b.HasIndex("Cart_id")
                        .IsUnique();

                    b.HasIndex("Shopping_status_id");

                    b.HasIndex("User_id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Category_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created_at")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "image");

                    b.Property<Guid?>("JobStatusJob_status_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Job_status_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<long>("Stock")
                        .HasColumnType("bigint");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Wishlist_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_id");

                    b.HasIndex("Category_id");

                    b.HasIndex("JobStatusJob_status_id");

                    b.HasIndex("Job_status_id");

                    b.HasIndex("User_id");

                    b.HasIndex("Wishlist_id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Data.Entities.ProductToCart", b =>
                {
                    b.Property<Guid>("Product_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Cart_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Product_cart_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Product_id", "Cart_id");

                    b.HasIndex("Cart_id");

                    b.ToTable("ProductsToCart");
                });

            modelBuilder.Entity("Data.Entities.ProductWishList", b =>
                {
                    b.Property<Guid>("Product_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Wishlist_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductWishList_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_id", "Wishlist_id");

                    b.HasIndex("Wishlist_id");

                    b.ToTable("ProductWishList");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Role_id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Data.Entities.ShoppingStatus", b =>
                {
                    b.Property<Guid>("Shopping_status_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Shopping_status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Shopping_status_id");

                    b.ToTable("ShoppingStatus");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created_at")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("Role_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("User_id");

                    b.HasIndex("Role_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Data.Entities.WishList", b =>
                {
                    b.Property<Guid>("Wishlist_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created_at")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Wishlist_id");

                    b.HasIndex("User_id")
                        .IsUnique();

                    b.ToTable("WishList");
                });

            modelBuilder.Entity("Data.Entities.Cart", b =>
                {
                    b.HasOne("Data.Entities.Coupon", "Coupon")
                        .WithMany("Carts")
                        .HasForeignKey("Coupon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.ShoppingStatus", "ShoppingStatus")
                        .WithMany()
                        .HasForeignKey("Shopping_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Data.Entities.Cart", "User_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("ShoppingStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.HasOne("Data.Entities.JobStatus", "Job_status")
                        .WithMany("Categories")
                        .HasForeignKey("Job_status_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job_status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.HasOne("Data.Entities.Cart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("Data.Entities.Order", "Cart_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.ShoppingStatus", "ShoppingStatus")
                        .WithMany()
                        .HasForeignKey("Shopping_status_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ShoppingStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.HasOne("Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("Category_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.JobStatus", null)
                        .WithMany("Products")
                        .HasForeignKey("JobStatusJob_status_id");

                    b.HasOne("Data.Entities.JobStatus", "Job_status")
                        .WithMany()
                        .HasForeignKey("Job_status_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.WishList", "WishList")
                        .WithMany("Products")
                        .HasForeignKey("Wishlist_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("Job_status");

                    b.Navigation("User");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("Data.Entities.ProductToCart", b =>
                {
                    b.HasOne("Data.Entities.Cart", "Cart")
                        .WithMany("ProductToCarts")
                        .HasForeignKey("Cart_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Product", "Product")
                        .WithMany("ProductToCarts")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Data.Entities.ProductWishList", b =>
                {
                    b.HasOne("Data.Entities.Product", "Product")
                        .WithMany("ProductWishLists")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.WishList", "WishList")
                        .WithMany("ProductWishLists")
                        .HasForeignKey("Wishlist_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Entities.WishList", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("WishList")
                        .HasForeignKey("Data.Entities.WishList", "User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Cart", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("ProductToCarts");
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Entities.Coupon", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("Data.Entities.JobStatus", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.Navigation("ProductToCarts");

                    b.Navigation("ProductWishLists");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("WishList")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.WishList", b =>
                {
                    b.Navigation("ProductWishLists");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
