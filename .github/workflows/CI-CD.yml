name: CICDPipeline
on:
  push:
    branches:
      - main
  pull_request: 
    branches: 
      - main
    types: [opened, synchronize, reopened]
permissions:
  contents: read
  id-token: write
jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
      - name: Restore dependencies
        run: dotnet restore ./emporium/emporium.sln
      - name: Build
        run: dotnet build ./emporium/emporium.sln --configuration Release --no-restore
      - name: Test
        run: dotnet test ./emporium/emporium.sln --configuration Release --no-build --no-restore --collect:"XPlat Code Coverage"
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner begin /k:"Medeteam_tech-trend-emporium" /o:"medeteam-1" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"  /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
          dotnet build ./emporium/emporium.sln
          .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  
  build_push:
    name: Build & Push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: login to docker hub
        uses: docker/login-action@v3
        with: 
          username: ${{secrets.DOCKER_USERNAME }}
          password: ${{secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Get short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{secrets.DOCKER_USERNAME }}/tech-trend-emporium:${{ env.SHORT_SHA }}
  deploy: 
    runs-on: self-hosted
    needs: [build_push]
    steps:
    - name: Pull Docker Image
      run: docker pull ${{secrets.DOCKER_USERNAME }}/tech-trend-emporium:latest
    - name: Stop and remove previous images
      run: |
        docker stop app || true
        docker rm app || true
    - name: Run Docker Container
      run: docker run -d -p 3000:3000 --name app ${{secrets.DOCKER_USERNAME }}/tech-trend-emporium:latest